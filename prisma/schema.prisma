generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int       @id @default(autoincrement()) @map("id")
  address     String    @unique @map("address")
  name        String?   @map("name")
  avatar      String?   @map("avatar")
  description String?   @map("description")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  spaces      Space[]
  points      Point[]
  Account     Account[]
  Session     Session[]

  @@map("users")
}

model Account {
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Space {
  id          Int      @id @default(autoincrement()) @map("id")
  userId      Int      @map("user_id")
  name        String   @map("name")
  avatar      String?  @map("avatar")
  description String?  @map("description")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tasks       Task[]

  @@map("spaces")
}

model EventType {
  id          Int      @id @default(autoincrement()) @map("id")
  name        String   @unique @map("name")
  description String?  @map("description")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  tasks       Task[]

  @@map("event_types")
}

model Task {
  id          Int       @id @default(autoincrement()) @map("id")
  spaceId     Int       @map("space_id")
  eventTypeId Int       @map("event_type_id")
  name        String    @map("name")
  description String?   @map("description")
  params      String?   @map("params")
  startDate   DateTime? @map("start_date")
  endDate     DateTime? @map("end_date")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  space       Space     @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  eventType   EventType @relation(fields: [eventTypeId], references: [id])
  points      Point[]

  @@map("tasks")
}

model Point {
  id          Int      @id @default(autoincrement()) @map("id")
  dataId      Int      @unique @map("data_id")
  userAddress String   @map("user_address")
  taskId      Int      @map("task_id")
  eventType   String   @map("event_type")
  points      Int      @map("points")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  user        User     @relation(fields: [userAddress], references: [address])
  task        Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@map("points")
}
