generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String            @id @default(cuid()) @map("id")
  address       String?           @unique @map("address")
  name          String?           @map("name")
  username      String?
  email         String?
  emailVerified DateTime?         @map("email_verified")
  image         String?
  avatar        String?           @map("avatar")
  description   String?           @map("description")
  createdAt     DateTime          @default(now()) @map("created_at")
  updatedAt     DateTime          @updatedAt @map("updated_at")
  quests        Quest[]
  accounts      Account[]
  sessions      Session[]
  opRecords     OperationRecord[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  name              String?
  username          String?
  image             String?
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Quest {
  id          Int         @id @default(autoincrement()) @map("id")
  userId      String      @map("user_id")
  name        String      @map("name")
  avatar      String?     @map("avatar")
  status      QuestStatus @default(Draft) @map("status")
  rewards     String?     @map("rewards")
  description String?     @map("description")
  startDate   DateTime?   @map("start_date")
  endDate     DateTime?   @map("end_date")
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")

  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  tasks Task[]

  @@map("quests")
}

enum QuestStatus {
  Draft
  Ongoing
  End
  Deleted
}

model EventType {
  id          Int      @id @default(autoincrement()) @map("id")
  name        String   @unique @map("name")
  description String?  @map("description")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  tasks Task[]

  @@map("event_types")
}

model Task {
  id          Int       @id @default(autoincrement()) @map("id")
  questId     Int       @map("quest_id")
  eventType   String    @map("event_type")
  name        String    @map("name")
  description String?   @map("description")
  params      Json      @map("params")
  startDate   DateTime? @map("start_date")
  endDate     DateTime? @map("end_date")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  quest         Quest            @relation(fields: [questId], references: [id], onDelete: Cascade)
  eventTypeName EventType        @relation(fields: [eventType], references: [name])
  opRecord      OperationRecord?

  @@map("tasks")
}

model Banner {
  id          Int          @id @default(autoincrement()) @map("id")
  title       String       @map("title")
  imageUrl    String       @map("image_url")
  redirectUrl String       @map("redirect_url")
  startDate   DateTime     @map("start_date")
  endDate     DateTime     @map("end_date")
  position    Int          @map("position")
  status      BannerStatus @default(active) @map("status")
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")

  @@map("banners")
}

enum BannerStatus {
  inactive
  active
}

model OperationRecord {
  id        Int           @id @default(autoincrement()) @map("id")
  userId    String        @map("user_id")
  eventType String        @map("event_type")
  taskId    Int           @unique @map("task_id")
  questId   Int           @map("quest_id")
  dataId    String?       @map("data_id")
  params    Json          @map("params")
  point     Int?          @map("point")
  status    OpCheckStatus @default(INIT) @map("status")
  createdAt DateTime      @default(now()) @map("created_at")
  updatedAt DateTime      @updatedAt @map("updated_at")
  Task      Task          @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([taskId, userId])
  @@map("op_records")
}

enum OpCheckStatus {
  INIT
  TURE
  FALSE
}

model Reputation {
  id             Int    @id @default(autoincrement()) @map("id")
  reputionIdType String @map("repution_id_type")
  params         Json   @map("params")
  weight         Int    @map("weight")

  @@map("reputations")
}
