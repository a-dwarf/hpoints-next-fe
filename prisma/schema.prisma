generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int      @id @default(autoincrement())
  address     String   @unique
  name        String?
  avatar      String?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  spaces      Space[]
  points      Point[]
}

model Space {
  id          Int      @id @default(autoincrement())
  userId      Int
  name        String
  avatar      String?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tasks       Task[]
}

model EventType {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  tasks       Task[]
}

model Task {
  id          Int      @id @default(autoincrement())
  spaceId     Int
  eventTypeId Int
  name        String
  description String?
  status      String?
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  space       Space    @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  eventType   EventType @relation(fields: [eventTypeId], references: [id])
  points      Point[]
}

model Point {
  id        Int      @id @default(autoincrement())
  userId    Int
  taskId    Int
  points    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
}
